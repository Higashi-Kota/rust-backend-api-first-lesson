services:
  app:
    # Option 1: ローカルでビルド (開発時推奨)
    build:
      context: .
      dockerfile: Dockerfile

    # Option 2: GitHub Container Registry からプル (CI/CDでビルドされたイメージを使用)
    # 使用する場合は上の build セクションをコメントアウトして、以下のコメントを外してください
    # image: ghcr.io/YOUR_USERNAME/YOUR_REPO:latest
    #
    # 実際の使用例 (YOUR_USERNAMEとYOUR_REPOを実際の値に置き換えてください):
    # image: ghcr.io/higashi-kota/rust-backend-api-first-lesson:latest

    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/taskdb
      - SERVER_ADDR=0.0.0.0:3000
      - RUST_LOG=info
      # Email Configuration
      - EMAIL_DEVELOPMENT_MODE=false
      - EMAIL_PROVIDER=mailhog
      - MAILHOG_HOST=mailhog
      - MAILHOG_PORT=1025
      - FROM_EMAIL=noreply@taskbackend.local
      - FROM_NAME=Task Backend Service
      # Storage Configuration
      - STORAGE_ENDPOINT=http://minio:9000
      - STORAGE_BUCKET=task-attachments
      - STORAGE_REGION=us-east-1
      - STORAGE_ACCESS_KEY=minioadmin
      - STORAGE_SECRET_KEY=minioadmin
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      mailhog:
        condition: service_started
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=taskdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # マイグレーション用のサービス
  migration:
    # ローカルビルドの場合
    build:
      context: .
      dockerfile: Dockerfile

    # GitHub Container Registry からプルする場合 (上のappサービスと同じイメージを使用)
    # image: ghcr.io/higashi-kota/rust-backend-api-first-lesson:latest

    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/taskdb
    depends_on:
      postgres:
        condition: service_healthy
    # ワークスペース対応: migration バイナリを直接実行
    command: ["migration", "up"]
    networks:
      - app-network

  # MailHog (Email testing server for development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: taskbackend_mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025" # SMTP server
      - "${MAILHOG_UI_PORT:-8025}:8025" # Web UI
    restart: unless-stopped
    networks:
      - app-network

  # MinIO (S3-compatible object storage for development)
  minio:
    image: minio/minio:latest
    container_name: taskbackend_minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "${MINIO_API_PORT:-9000}:9000" # API
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # MinIO Client for bucket initialization
  minio-mc:
    image: minio/mc:latest
    container_name: taskbackend_minio_mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 minioadmin minioadmin;
      mc mb --ignore-existing local/task-attachments;
      mc anonymous set download local/task-attachments;
      echo 'Bucket created successfully';
      "
    networks:
      - app-network

volumes:
  postgres_data:
  minio_data:

networks:
  app-network:
    driver: bridge
