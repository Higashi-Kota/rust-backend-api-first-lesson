name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

jobs:
  # Phase 1: 基本チェック（最速で失敗を検出）
  check-and-lint:
    name: Check and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          cache-on-failure: true
          shared-key: "check"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev lld

      - name: Verify reproducible build with Cargo.lock
        run: |
          if [ ! -f Cargo.lock ]; then
            echo "ERROR: Cargo.lock not found. This should be committed for applications."
            exit 1
          fi
          cargo check --workspace --locked

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  # Phase 2: ビルドとテスト準備
  build-and-test-prep:
    name: Build and Test Preparation
    runs-on: ubuntu-latest
    needs: [check-and-lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          cache-on-failure: true
          shared-key: "build"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev lld

      - name: Build all test binaries
        run: |
          # Build library tests
          cargo test --lib --no-run --locked
          # Build integration tests
          cargo test --test main --no-run --locked
          # Build migration binary
          cargo build --package migration --locked
          # Build CI profile binaries
          cargo build --profile ci --workspace --locked

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-binaries
          path: |
            target/debug/deps/*
            target/debug/migration
            target/ci/
          retention-days: 1

      - name: Check workspace structure
        run: |
          echo "Workspace members:"
          cargo metadata --format-version 1 | jq -r '.workspace_members[]'
          echo "Test binaries:"
          find target/debug/deps -name '*-*' -type f -executable | wc -l

  # Phase 3: ユニットテスト（ビルド済みバイナリを使用）
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [build-and-test-prep]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-binaries
          path: target/

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Run unit tests
        run: |
          # Find and run all lib test binaries
          find target/debug/deps -name 'task_backend-*' -type f -executable | while read test_bin; do
            echo "Running: $test_bin"
            $test_bin --test-threads=4
          done

  # Phase 4: 統合テスト準備（マイグレーションのみ）
  integration-test-prep:
    name: Integration Test Preparation
    runs-on: ubuntu-latest
    needs: [build-and-test-prep]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-binaries
          path: target/

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql-client

      - name: Run migration
        env:
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        run: cargo run --package migration -- up

      - name: Export database schema
        env:
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        run: |
          sudo apt-get install -y postgresql-client
          pg_dump -s -U test_user -h localhost -d test_db > schema.sql

      - name: Upload schema
        uses: actions/upload-artifact@v4
        with:
          name: db-schema
          path: schema.sql
          retention-days: 1

  # Phase 5: 統合テスト（並列実行）
  integration-tests:
    name: Integration Tests (${{ matrix.group }})
    runs-on: ubuntu-latest
    needs: [integration-test-prep]
    
    strategy:
      fail-fast: false
      matrix:
        group:
          - integration::admin
          - integration::analytics
          - integration::auth
          - integration::gdpr
          - integration::organization
          - integration::organization_hierarchy
          - integration::permission
          - integration::roles
          - integration::security
          - integration::subscription
          - integration::tasks
          - integration::team
          - integration::user

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-binaries
          path: target/

      - name: Download schema
        uses: actions/download-artifact@v4
        with:
          name: db-schema
          path: .

      - name: Setup test environment
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql-client
          
          # Make test binaries executable
          find target/debug/deps -name 'main-*' -type f | xargs chmod +x
          
          # Import database schema
          PGPASSWORD=test_password psql -U test_user -h localhost -d test_db < schema.sql

      - name: Run integration tests for ${{ matrix.group }}
        env:
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
          SERVER_ADDR: 0.0.0.0:3000
          RUST_LOG: debug
        run: |
          # Find the test binary
          TEST_BINARY=$(find target/debug/deps -name 'main-*' -type f -executable | head -n1)
          echo "Running test binary: $TEST_BINARY"
          # Run the specific test group
          $TEST_BINARY ${{ matrix.group }} --test-threads=1

  # Phase 6: セキュリティ監査
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run security audit
        uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Phase 7: Docker ビルド
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64

      - name: Verify built image
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Built image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Testing image health..."
          docker run --rm -d --name test-container \
            -e DATABASE_URL=postgres://test:test@localhost:5432/test \
            $(echo "${{ steps.meta.outputs.tags }}" | head -n1) &
          sleep 5
          docker logs test-container || true
          docker stop test-container || true

  # Phase 8: デプロイ
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ghcr.io/${{ github.repository }}:develop to staging environment..."
          echo "Available for deployment:"
          echo "- Application: task-backend"
          echo "- Migration: migration"
          echo "- Image: ghcr.io/${{ github.repository }}:develop"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ghcr.io/${{ github.repository }}:latest to production environment..."
          echo "Available for deployment:"
          echo "- Application: task-backend"
          echo "- Migration: migration"
          echo "- Image: ghcr.io/${{ github.repository }}:latest"

  # PR用のワークスペース情報表示
  workspace-info:
    name: Workspace Information
    runs-on: ubuntu-latest
    needs: [check-and-lint]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          shared-key: "info"

      - name: Display workspace information
        run: |
          echo "## Workspace Structure" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cargo metadata --format-version 1 | jq -r '.workspace_members[]' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "## Package Versions" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cargo metadata --format-version 1 | jq -r '.packages[] | select(.source == null) | "\(.name): \(.version)"' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "## Dependencies Overview" >> $GITHUB_STEP_SUMMARY
          echo "Total unique dependencies: $(cargo metadata --format-version 1 | jq '[.packages[].dependencies[].name] | unique | length')" >> $GITHUB_STEP_SUMMARY